datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  discordId     String  @id @unique
  minecraftUuid String? @unique
  username      String?
  discriminator String?
  accessToken   String?
  refreshToken  String?
  tokenExpires  BigInt?

  members Member[]
}

model Member {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [guildId])

  discordId String
  user      User   @relation(fields: [discordId], references: [discordId])

  openTicketChannelId       String?  @unique
  guildApplicationChannelId String?  @unique
  timeJoinedWaitlist        BigInt?
  frozenOnWaitlist          Boolean?
  informedOnWaitlist        Boolean?

  @@id([guildId, discordId])
}

model Guild {
  guildId              String   @id
  waitlistJoinMessage  String   @default("You are now on the waitlist")
  ticketRoleIds        String[]
  applicationQuestions String[]

  members            Member[]
  channels           Channel[]
  roles              Role[]
  skullboardMessages SkullboardMessage[]
}

model SkullboardMessage {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [guildId])

  originalMessageId   String @unique
  skullboardMessageId String @unique

  @@id([guildId, originalMessageId])
}

enum RoleType {
  DISCORD_STAFF
  GUILD_STAFF
  APPLICATIONS_TEAM
  WAITLIST
}

model Role {
  roleId  String
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [guildId])

  roleType RoleType

  @@id([roleId, guildId])
}

enum ChannelType {
  WAITLIST
  SUGGESTIONS
  GUILD_BRIDGE
  SKULLBOARD
}

model Channel {
  channelId String
  guildId   String
  guild     Guild  @relation(fields: [guildId], references: [guildId])

  channelType ChannelType

  @@id([channelId, guildId])
}
